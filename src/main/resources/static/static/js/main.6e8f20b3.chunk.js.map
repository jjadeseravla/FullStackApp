{"version":3,"sources":["client.js","SuccessMessage.js","NewStudentForm.js","Contents.js","App.js","serviceWorker.js","index.js"],"names":["checkStatus","response","ok","error","Error","statusText","json","then","e","Promise","reject","SuccessMessage","NewStudentForm","useState","firstName","setFirstName","secondName","setSecondName","email","setEmail","gender","setGender","handleSubmit","setHandleSubmit","React","data","setData","onSubmit","event","student","preventDefault","isSubmitting","errorMessage","fetch","headers","method","body","JSON","stringify","alert","catch","message","value","onChange","target","placeholder","type","name","required","disabled","onClick","Contents","handleAddStudentClickEvent","setHandleAddStudentClickEvent","App","students","state","setState","useEffect","res","console","log","numberOfStudents","length","map","index","key","studentId","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6e8f20b3.chunk.js","sourcesContent":["import fetch from 'unfetch';\n\nconst checkStatus = (response) => {\n    if (response.ok) {\n        return response;\n    } else {\n        let error = new Error(response.statusText);\n        error.response = response;\n        response.json().then(e => {\n            error.error = e;\n        });\n        return Promise.reject(error);\n    }\n}\n\nexport const getAllStudents = () =>\n    fetch('api/students') //fetch gives access to a promise\n    .then(checkStatus);\n\nexport const addNewStudent = (student) =>\n    fetch('api/students', {\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify(student)\n        //body: JSON.stringify({firstName: \"David\", secondName: \"OLeary\", email: \"dol@gmail.com\", gender:\"MALE\"})\n    })\n    .then(checkStatus);\n","import React, {useState} from 'react';\n\nexport function SuccessMessage() {\n\n    return (\n        <div>\n            <h1>Success!</h1>\n        </div>\n    )\n}","import React, { useState } from \"react\";\nimport { addNewStudent } from \"./client\";\nimport { SuccessMessage }  from './SuccessMessage';\n\nfunction NewStudentForm() {\n    const [firstName, setFirstName] = useState(\"\");\n    const [secondName, setSecondName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [gender, setGender] = useState(\"\");\n\n    const [handleSubmit, setHandleSubmit] = useState(false);\n    const toggleSubmitMessage = () => setHandleSubmit(!handleSubmit);\n\n    const [data, setData] = React.useState(firstName, secondName, email, gender);\n\n    const handleFormSubmit = event => {\n        //console.log(alert(JSON.stringify(data, null, 2)));\n        event.preventDefault();\n        setData({\n            ...data,\n            isSubmitting: true,\n            errorMessage: null\n        });\n\n        //console.log({firstName, secondName, email, gender})\n        addNewStudent({firstName, secondName, email, gender}).then(() => {\n            alert(JSON.stringify({\n                firstName: data.firstName,\n                secondName: data.secondName,\n                email: data.email,\n                gender: data.gender\n            }))\n        })\n            .catch(error => {\n                setData({\n                    ...data,\n                    isSubmitting: false,\n                    errorMessage: error.message || error.statusText\n                });\n            });\n    };\n\n    return (\n        <form onSubmit={handleFormSubmit}>\n            <input\n                value={data.firstName}\n                onChange={e => setFirstName(e.target.value)}\n                placeholder=\"First name\"\n                type=\"text\"\n                name=\"firstName\"\n                required\n            />\n            <input\n                value={data.secondName}\n                onChange={e => setSecondName(e.target.value)}\n                placeholder=\"Second name\"\n                type=\"text\"\n                name=\"secondName\"\n                required\n            />\n            <input\n                value={data.email}\n                onChange={e => setEmail(e.target.value)}\n                placeholder=\"Email address\"\n                type=\"email\"\n                name=\"email\"\n                required\n            />\n            <input\n                value={data.gender}\n                onChange={e => setGender(e.target.value)}\n                placeholder=\"Gender. E.g Male or Female\"\n                type=\"gender\"\n                name=\"gender\"\n                required\n            />\n            <button type=\"submit\" disabled={data.isSubmitting} onClick={toggleSubmitMessage}>\n                {data.isSubmitting ? (\n                    \"Loading...\"\n                ) : (\n                    \"Submit\"\n                )}\n            </button>\n            {handleSubmit ? <SuccessMessage/> : null}\n        </form>\n    );\n}\n export default NewStudentForm;\n\n","import React, {useState} from 'react';\nimport  NewStudentForm  from './NewStudentForm';\n\nexport function Contents() {\n\n    const [handleAddStudentClickEvent, setHandleAddStudentClickEvent] = useState(false);\n\n    const toggleAddStudentForm = () => setHandleAddStudentClickEvent(!handleAddStudentClickEvent);\n\n    return (\n    <div>\n        <button onClick={toggleAddStudentForm}>\n            Add new Student +\n        </button>\n        {handleAddStudentClickEvent ? <NewStudentForm/> : null}\n    </div>\n    )\n};\n","import React, { useState, useEffect } from 'react';\nimport { getAllStudents } from './client';\nimport { Contents } from './Contents';\n\n//takes response and grabs json inside of it\nfunction App() {\n    const [state, setState] = useState({students:[]});\n    useEffect(() => {\n        fetchStudents();\n    }, [])\n\n    function fetchStudents() {\n        getAllStudents()\n            .then(res => res.json())\n            .then(students => {\n                setState({\n                    students: students\n                }, ()=>{\n                    console.log(state.students[0]['firstName']);\n                })\n                console.log(typeof students)\n            })\n            .catch(error => {\n                console.log(error.error.message);\n                setState({\n                    students: []\n                });\n            });\n    }\n\n    var numberOfStudents = state.students.length\n    if (state.students && numberOfStudents){\n\n        return (\n            <div>\n                <h1>Students</h1>\n                <Contents />\n                <h2>Number of Students: </h2>{numberOfStudents ? numberOfStudents : null}\n\n                <div>\n                    {state.students.map((student, index) =>\n                        <div key={index}>\n                            <h2>{student.studentId}</h2>\n                            <p>{student.firstName}</p>\n                            <p>{student.secondName}</p>\n                            <p>{student.gender}</p>\n                            <p>{student.email}</p>\n                        </div>\n                    )}\n                </div>\n            </div>\n        )\n    }\n        return (\"No Students found\")\n\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}